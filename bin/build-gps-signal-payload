#!/usr/bin/env node

require('../lib/banner')

const fs = require('fs')
const path = require('path')
const moment = require('moment')

const compileGpsSdrSim = require('./compile-gps-sdr-sim')
const downloadUrsEarthdataEphemeris = require('./download-urs-earthdata-ephemeris')

const { mkdirp } = require('mkdirp')
const { program } = require('commander')
const { confirm, input, select } = require('@inquirer/prompts')

const resolveFiles = require('../lib/resolveFiles')
const { BUILD_DIRECTORY, PAYLOADS_DIRECTORY, BRDC_FILE_MATCHER } = require('../lib/constants')

program
  .option('--gpssim-download-compile', 'Download & compile gps-sdr-sim')
  .option('--gpssim-download-ephemeris', 'Download & build ephemeris data')
  .option('--gpssim-binary <file>', 'Path to gps-sdr-sim binary', path.join(BUILD_DIRECTORY, 'gps-sdr-sim-master', 'gps-sdr-sim'))
  .option('--gpssim-output <path>', 'Path to output binary signal file', PAYLOADS_DIRECTORY)
  .option('--gpssim-ephemeris <file or path>', 'Path to ephemeris files', BUILD_DIRECTORY)
  .option('--gpssim-iq-bits <bits>', 'IQ bits', 8)
  .option('--gpssim-duration <duration>', 'Duration to simulate')
  .option('--gpssim-latitude <latitude>', 'Latitude to simulate')
  .option('--gpssim-longitude <longitude>', 'Longitude to simulate')
  .option('--gpssim-altitude <altitude>', 'Altitude to simulate')

const resolveEphemerisFiles = ephemeris => {
  return resolveFiles(ephemeris)
    .filter(name => BRDC_FILE_MATCHER.test(name))
}

const checkGpsSdrSimBinary = binary => {
  try { return fs.lstatSync(binary).isFile() }
  catch (e) { return false }
}

module.exports = async (options = {}) => {
  const binaryExists = checkGpsSdrSimBinary(options.gpssimBinary)
  if (binaryExists) console.info('gps-sdr-sim binary found')
  if (!binaryExists || options.gpssimDownloadCompile) {
    const compile = options.gpssimDownloadCompile
      || await confirm({ message: 'Download and compile gps-sdr-sim now', default: !binaryExists })
    if (compile) await compileGpsSdrSim(options)
  }

  if (!checkGpsSdrSimBinary(options.gpssimBinary)) {
    return console.error('No gps-sdr-bin found. Aborting.')
  }
  
  const ephemerisFiles = await resolveEphemerisFiles(options.gpssimEphemeris)
  const downloadEphemeris = options.gpssimDownloadEphemeris
    || await confirm({ message: 'Download new ephemeris data now', default: !ephemerisFiles.length })
  if (downloadEphemeris) await downloadUrsEarthdataEphemeris(options)

  const ephemeris = await (async () => {
    const ephemerisFiles = await resolveEphemerisFiles(options.gpssimEphemeris)
    if (ephemerisFiles.length === 1) return ephemerisFiles[0]
    const ephemerisChoices = ephemerisFiles.map(name => ({ name, value: path.resolve(name) }))
    return await select({ message: 'Select ephemeris file', choices: ephemerisChoices })
  })()

  const latitude = options.latitude || await input({ message: 'Latitude to simulate', default: '37.82039916850053' })
  const longitude = options.longitude || await input({ message: 'Longitude to simulate', default: '-122.47826400437096' })
  const altitude = options.altitude || await input({ message: 'Altitude to simulate', default: '100' })
  const duration = options.gpssimDuration ||  await input({ message: 'Signal duration', default: 600 })
  const payloadFilename = `${path.basename(ephemeris)}_${latitude}_${longitude}_${altitude}.bin`

  console.info(ephemeris, 'compiling...')
  await mkdirp(options.gpssimOutput)
  const { execa } = await import('execa')
  await execa(options.gpssimBinary, [
    '-b', options.gpssimIqBits,
    '-d', duration,
    '-e', ephemeris,
    '-t', moment.utc().format('YYYY/MM/DD,hh:mm:ss'),
    '-l', `${latitude},${longitude},${altitude}`,
    '-o', path.resolve(options.gpssimOutput, payloadFilename)
  ]).pipeStdout(process.stdout)
    .pipeStderr(process.stderr)
}

if (require.main === module) {
  program.parse()
  module.exports(program.opts())
}
